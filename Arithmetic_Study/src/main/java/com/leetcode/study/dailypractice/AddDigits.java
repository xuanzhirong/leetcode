package com.leetcode.study.dailypractice;

/**
 * 258. 各位相加
 * <p>
 * 给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。
 * <p>
 * 示例:输入: 38 输出: 2
 * 解释: 各位相加的过程为：3 + 8 = 11, 1 + 1 = 2。 由于 2 是一位数，所以返回 2。
 * <p>
 * 进阶:你可以不使用循环或者递归，且在 O(1) 时间复杂度内解决这个问题吗？
 */
public class AddDigits {
    /**
     * 模九法
     * 某数 xyzk 可以分解为 xyzk = 1000*x + 100*y + 10*z + k = 999*x + 99*y + 9 *z + (x + y + z + k)
     * 461 = 4*100 + 6*10 + 1 = 4*99 + 6*9 + 4 + 6 + 1 = 4*99 + 6*9 + 10 + 1 = 4*99 + 6*9 + 9 + (1+1)
     * 461 % 9 = (4*99 + 6*9 + 9 + (1+1)) % 9 = 0 + 0 + 0 + 2 = 2
     * 但如果是 459， 4 + 5 + 9 = 18， 1 + 8 = 9，而 459 % 9 = 0 显然不正确
     * 优化 (459 - 1) % 9 + 1 = 458 % 9 + 1 = 8 + 1 = 9 , 正确
     * 减一的部分只在我最后的尾数部分减，并不影响前面的模九计算
     */
    public int addDigits(int num) {
        return (num - 1) % 9 + 1;
    }

    // 循环法
    public int addDigits2(int num) {
        while (num >= 10) {
            num = num / 10 + num % 10;
        }
        return num;
    }
}
